# Default values for nms.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Override namespace for NMS instance manager chart resources.
# By default, the chart creates resources in the release namespace.
# This may not be desirable when using this chart as a dependency.
# namespace: "example"

# Set admin password for NMS using --set flag with helm install
# For example, with openssl LibreSSL 2.8.3, helm install --set adminPasswordHash=$(openssl passwd -1 "YouPassword123#")
adminPasswordHash: "$1$LCEHZ8If$HNvp1Gd1hx.coyaRBfVEQ1"

# Use imagePullSecret to pass secret resources to pull all docker images from private registry.
# https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/:
imagePullSecrets: []
  # - name: "your-image-pull-secret"

nameOverride: "nms"
fullnameOverride: "nms"

# initialise global value for use by modules
global:
    nmsModules:
        nms-acm:
            enabled: true
nms-acm:
    imagePullSecrets:
    - name: regcred
    acm:
        image:
            repository: calalangacr.azurecr.io/nms-acm
            tag: 1.4.0

## nmsClickhouse server configuration packaged with helm
## Enable this if external clickhouse is disabled
nmsClickhouse:
  # If enabled, chart creates a clickhouse deployment required by NMS
  enabled: true
  fullnameOverride: clickhouse
  image:
    # public clickhouse published image
    # https://hub.docker.com/r/yandex/clickhouse-server
    repository: clickhouse/clickhouse-server
    # NMS recommended clickhouse server version
    tag: 21.3.20.1-alpine
    pullPolicy: IfNotPresent
  # Username to connect to the nms clickhouse server as
  user:
  # Password for nms clickhouse server.
  password:
  ##
  ## Clickhouse service
  ##
  service:
    name: clickhouse
    rpcPort: 9000
  ##
  ## Clickhouse server resources
  ##
  resources:
    requests:
      # These are minimum requirements on node to run clickhouse server
      # There are no limits in place, so vertically scale as per data needs
      cpu: 500m
      memory: 1Gi

  # When persistence.enabled is set, chart uses userVolumeMounts and userVolumes to persist data outside its pod.
  # A reference example is included in example-values for enterprise setup.
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim:

    ## nms data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default, it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    ## https://kubernetes.io/docs/concepts/storage/storage-classes/#the-storageclass-resource
    storageClass: ""
    volumeName: ""
    accessMode: ReadWriteOnce
    size: 1Gi

## External clickhouse configuration provided by user (not necessarily running in kubernetes)
externalClickhouse:
  # Address of the external cluster. This is required when clickhouse.enabled is false
  address:
  # Username for the external clickhouse server to connect as
  user: ""
  # Password for the external clickhouse server.
  password: ""

##
## NMS service account
##
serviceAccount:
  annotations: {}

##
# All properties used by API-GW
##
apigw:
  name: apigw
  # To bring your own NGINX API Gateway certificates for hosting HTTPS NMS server,
  # set "tlsSecret" to an existing kubernetes secret name in the same namespace as the chart.
  # We recommend to set "tlsSecret" for production use case to manage certs.
  # By default, this helm chart creates it's own CA to self-sign HTTPS server cert key pair. These are not managed.
  # Follow our installation guide to get an example of a "tlsSecret" resource.
  tlsSecret: ""
  image:
    # if the image is on a private registry, provide imagePullSecrets
    # For using NGINX Plus, update the repository name to your NGINX Plus docker image
    repository: calalangacr.azurecr.io/nms-apigw
    tag: 2.7.0
    pullPolicy: IfNotPresent
  container:
    port:
      https: 443
  service:
    name: apigw
    httpsPort: 443
  resources:
    requests:
      # These are minimum requirements on node to run NGINX api-gw
      # There are no limits in place, so vertically scale as per data needs
      cpu: 250m
      memory: 256Mi

# All properties used by Core process
core:
  name: core
  image:
    # if the image is on a private registry, provide imagePullSecrets
    repository: calalangacr.azurecr.io/nms-core
    tag: 2.7.0
    pullPolicy: IfNotPresent
  container:
    port:
      http: 8033
      db: 7891
      grpc: 8038
  service:
    httpPort: 8033
    grpcPort: 8038
  resources:
    requests:
      # These are minimum requirements on node to run core
      # There are no limits in place, so vertically scale as per data needs
      cpu: 500m
      memory: 512Mi

  # When persistence.enabled is set, chart uses userVolumeMounts and userVolumes to persist data outside its pod.
  # A reference example is included in example-values for enterprise setup.
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If existingClaim is defined, PVC must be created manually before volume will be bound
    claims:
      - name: dqlite
        existingClaim:
        size: 500Mi
        accessMode: ReadWriteOnce

      - name: secrets
        existingClaim:
        size: 128Mi
        accessMode: ReadWriteOnce

    ## nms data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default, it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    ## https://kubernetes.io/docs/concepts/storage/storage-classes/#the-storageclass-resource
    storageClass: ""
    volumeName: ""

# All properties used by DPM process
dpm:
  name: dpm
  image:
    # if the image is on a private registry, provide imagePullSecrets
    repository: calalangacr.azurecr.io/nms-dpm
    tag: 2.7.0
    pullPolicy: IfNotPresent
  container:
    port:
      http: 8034
      grpc: 8036
      nats: 9100
      db: 7890
  service:
    name: nms
    httpPort: 8034
    grpcPort: 8036
    natsPort: 9100
  resources:
    # These are minimum requirements on node to run dpm
    # There are no limits in place, so vertically scale as per data needs
    requests:
      cpu: 500m
      memory: 512Mi

  # When persistence.enabled is set, chart uses userVolumeMounts and userVolumes to persist data outside its pod.
  # A reference example is included in example-values for enterprise setup.
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If existingClaim is defined, PVC must be created manually before volume will be bound
    claims:
      - name: dqlite
        existingClaim:
        size: 1Gi
        accessMode: ReadWriteOnce

      - name: nats-streaming
        existingClaim:
        size: 1Gi
        accessMode: ReadWriteOnce

    ## nms data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default, it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    ## https://kubernetes.io/docs/concepts/storage/storage-classes/#the-storageclass-resource
    storageClass: ""
    volumeName: ""

# All properties used by Ingestion process
ingestion:
  name: ingestion
  image:
    # if the image is on a private registry, provide imagePullSecrets
    repository: calalangacr.azurecr.io/nms-ingestion
    tag: 2.7.0
    pullPolicy: IfNotPresent
  # default replica count but can be increased as needed
  replicaCount: 1
  container:
    port:
      grpc: 8035
  service:
    name: nms
    grpcPort: 8035
  resources:
    # These are minimum requirements on node to run ingestion
    # There are no limits in place, so vertically scale as per data needs
    requests:
      cpu: 500m
      memory: 512Mi

# All properties used by Integrations process
integrations:
  name: integrations
  image:
    # if the image is on a private registry, provide imagePullSecrets
    repository: calalangacr.azurecr.io/nms-integrations
    tag: 2.7.0
    pullPolicy: IfNotPresent
  container:
    port:
      http: 8037
      db: 7892
  service:
    name: nms
    httpPort: 8037
  resources:
    # These are minimum requirements on node to run Integrations
    # There are no limits in place, so vertically scale as per data needs
    requests:
      cpu: 500m
      memory: 512Mi

  # When persistence.enabled is set, chart uses userVolumeMounts and userVolumes to persist data outside its pod.
  # A reference example is included in example-values for enterprise setup.
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If existingClaim is defined, PVC must be created manually before volume will be bound
    claims:
      - name: dqlite
        existingClaim:
        size: 1Gi
        accessMode: ReadWriteOnce

    ## nms data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default, it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    ## https://kubernetes.io/docs/concepts/storage/storage-classes/#the-storageclass-resource
    storageClass: ""
    volumeName: ""