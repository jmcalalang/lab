# NGINX Management Suite - Instance Manager configuration
# Created for v. 2.4
# (c) NGINX, Inc. 2021-2022
# If you choose to modify this file, create a backup of your changes.
# This configuration file at its default location might be replaced by the
# package management during upgrades
# NOTE: enabling OIDC authentication requires using NGINX Plus
#       with NJS installed and the module loaded in the config
# Enable when using OIDC
# log_format oidc_jwt '$remote_addr - $jwt_claim_sub [$time_local] "$request" '
#                     '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
#                     '"$http_x_forwarded_for"';
# Main routing logic
map $uri $mapped_upstream {
    # default is a down upstream that returns 502
    default default-service;
    # Core API path mappings
    ~^/api/platform/v1/analytics core-api-service;
    ~^/api/platform/v1/license core-api-service;
    ~^/api/platform/v1/roles core-api-service;
    ~^/api/platform/v1/userinfo core-api-service;
    ~^/api/platform/v1/users core-api-service;
    ~^/api/platform/v1/groups core-api-service;
    ~^/api/platform/v1/features core-api-service;
    ~^/api/platform/v1/inventory core-api-service;
    # SCIM related mappings
    ~^/api/scim/v2/users core-api-service;
    ~^/api/scim/v2/groups core-api-service;
    # DPM service API path mappings
    ~^/api/platform/v1/analysis dpm-api-service;
    ~^/api/platform/v1/certs dpm-api-service;
    ~^/api/platform/v1/configs dpm-api-service;
    ~^/api/platform/v1/instance-groups dpm-api-service;
    ~^/api/platform/v1/instances dpm-api-service;
    ~^/api/platform/v1/servers dpm-api-service;
    ~^/api/platform/v1/systems dpm-api-service;
    ~^/api/platform/v1/security/publish dpm-api-service;
    ~^/api/platform/v1/security/deployments dpm-api-service;
    # Integration service API path mappings
    ~^/api/platform/v1/security/policies integrations-api-service;
    # Allows all modules to include their own mapped apis as part of the base config
    include /etc/nms/nginx/upstreams/mapped_apis/*.conf;
}
# Default service used by the uri map above
upstream default-service {
    # a down service returns a 502
    server unix:/var/run/nms/default.sock down;
}
# REST to core services
upstream core-api-service {
    zone core-api-service 64k;
    # Unix socket by default, optional TCP needs configuration in /etc/nms/nms.conf
    server '{{ template "nms.core.service.http" . }}';
    #server 127.0.0.1:8033;
    keepalive 32;
}
upstream core-grpc-service {
    zone core-grpc-service 64k;
    server '{{ template "nms.core.service.grpc" . }}';
    keepalive 32;
}
# REST to DPM services
upstream dpm-api-service {
    zone dpm-api-service 64k;
    # Unix socket by default, optional TCP needs configuration in /etc/nms/nms.conf
    server '{{ template "nms.dpm.service.http" . }}';
    #server 127.0.0.1:8034;
    keepalive 32;
}
# gRPC to ingestion services
upstream ingestion-grpc-service {
    zone ingestion-grpc-service 64k;
    # Unix socket by default, optional TCP needs configuration in /etc/nms/nms.conf
    server '{{ template "nms.ingestion.service.grpc" . }}';
    #server 127.0.0.1:8035;
    keepalive 32;
}
# gRPC to DPM services
upstream dpm-grpc-service {
    zone dpm-grpc-service 64k;
    # Unix socket by default, optional TCP needs configuration in /etc/nms/nms.conf
    server '{{ template "nms.dpm.service.grpc" . }}';
    #server 127.0.0.1:8036;
    keepalive 32;
}
# REST to Integrations services
upstream integrations-api-service {
    zone integrations-api-service 64k;
    # Unix socket by default, optional TCP needs configuration in /etc/nms/nms.conf
    server '{{ template "nms.integrations.service.http" . }}';
    #server 127.0.0.1:8037;
    keepalive 32;
}
# Upstreams provided by all modules
include /etc/nms/nginx/upstreams/*.conf;
# WebSocket config, comment out if this section is duplicate via other config files
map $http_upgrade $connection_upgrade {
    default upgrade;
    "" close;
}
# shared rate limiting memory zone definitions
limit_req_zone $binary_remote_addr zone=nms-ratelimit:10m rate=200r/s;
limit_req_zone $binary_remote_addr zone=nms-strict-ratelimit:10m rate=10r/s;
# OIDC -- client configuration uncomment include to enable
#include /etc/nms/nginx/oidc/openid_configuration.conf;
# Main external HTTPS server, needs port 443
server {
    listen 443 ssl http2;
    root /var/www/nms;
    server_name _;
    # ssl_protocols       TLSv1.1 TLSv1.2 TLSv1.3; # TODO support for TLSv1.3?
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_certificate '{{ template "nms.apigw.secrets.crt" . }}';
    ssl_certificate_key '{{ template "nms.apigw.secrets.key" . }}';
    ssl_client_certificate '{{ template "nms.apigw.secrets.ca" . }}';
    # Enables verification of client certificates. The verification result is stored in the $ssl_client_verify variable.
    # $ssl_client_verify returns one of the following result of client certificate verification:
    # 1. “SUCCESS”
    # 2. “FAILED:reason”, where reason is message as to why the verification failed.
    # 3. “NONE” if a certificate was not present.
    ssl_verify_client optional;
    keepalive_timeout 75s;
    client_max_body_size 50M; # Increase in case of large configuration files
    error_page 401 /401.json;
    error_page 403 /403.json;
    error_page 502 /502.json;
    include /etc/nms/nginx/errors.http_conf;
    include /etc/nms/nginx/errors-grpc.server_conf;
    # Additional locations provided by other modules
    include /etc/nms/nginx/locations/*.conf;
    # Default header options
    add_header X-Frame-Options sameorigin;
    add_header X-Content-Type-Options nosniff;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma no-cache;
    proxy_hide_header X-Powered-By;
    proxy_set_header Host $host;
    proxy_ssl_protocols TLSv1.1 TLSv1.2;
    proxy_headers_hash_max_size 512;
    proxy_headers_hash_bucket_size 128;
    ## For use with basic auth
    auth_basic_user_file /etc/nms/nginx/.htpasswd;
    ## auth type indication to the client
    add_header Nginx-Management-Suite-Auth Basic;
    ## For OIDC Authentication: authorization code flow and Relying Party processing
    # OIDC - remove comment from following directives to enable
    # add_header Nginx-Management-Suite-Auth "OIDC";
    #include /etc/nms/nginx/oidc/openid_connect.conf;
    # Enable ONE of the two options according to HTTP Basic or OIDC authentication:
    # HTTP Basic:
    proxy_set_header Nginx-Management-Suite-User $remote_user;
    proxy_set_header Nginx-Management-Suite-Groups "";
    proxy_set_header Nginx-Management-Suite-ExternalId "";
    # OIDC: use email as a unique identifier
    # NOTE: the username is dependent upon claims provided by your IdP
    #proxy_set_header Nginx-Management-Suite-Auth "OIDC";
    #proxy_set_header Nginx-Management-Suite-User $jwt_claim_email;
    #proxy_set_header Nginx-Management-Suite-Groups $jwt_claim_groups;
    #proxy_set_header Nginx-Management-Suite-ExternalId $jwt_claim_sub;
    # Optional OIDC settings: additional debug log
    #error_log /var/log/nginx/oidc.log debug; # Reduce severity level as required
    proxy_set_header Authorization "";
    server_tokens off;
    # Object and method headers for Role-Based Access Control
    proxy_set_header object $request_uri;
    proxy_set_header http-method $request_method;
    # Default limit is applied here to all locations. A more relaxed limit is defined inside the /api location.
    limit_req zone=nms-strict-ratelimit burst=10 nodelay;
    limit_req_status 429;
    # Redirect from / to /ui/
    location = / {
        absolute_redirect off;
        return 302 /ui/;
    }
    location /api {
        # HTTP Basic authentication (disable if using OIDC)
        auth_basic "Nginx Management Suite";
        # OIDC authentication (uncomment to enable)
        #error_page 401 = @do_oidc_flow;
        #auth_jwt "" token=$session_jwt;
        #auth_jwt_key_request /_jwks_uri;
        # Disabled proxy_ssl_* directives due to plaintext proxy_pass.
        # Re-enable them in case of advanced, customized multi-server installation.
        # proxy_ssl_trusted_certificate /etc/nms/certs/ca.pem;
        # proxy_ssl_certificate         /etc/nms/certs/manager-client.pem;
        # proxy_ssl_certificate_key     /etc/nms/certs/manager-client.key;
        # proxy_ssl_verify        on;
        # proxy_ssl_name          platform;
        # proxy_ssl_server_name   on;
        # Removing this line might apply the default limits from "nms-strict-ratelimit" zone.
        limit_req zone=nms-ratelimit burst=20 nodelay;
        limit_req_status 429;
        # Dynamic proxying to the correct service, based on the corresponding map above
        proxy_pass https://$mapped_upstream;
        proxy_ssl_trusted_certificate '{{ template "nms.secret.internal-certs.dir" . }}/ca.pem';
        proxy_ssl_certificate '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.pem';
        proxy_ssl_certificate_key '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.key';
        proxy_ssl_verify off;
        proxy_ssl_session_reuse on;
        proxy_ssl_protocols TLSv1.1 TLSv1.2;
        proxy_ssl_ciphers HIGH:!aNULL:!MD5;
    }
    location = /login {
        # HTTP Basic authentication (disable if using OIDC)
        auth_basic "Nginx Management Suite";
        # OIDC authentication (uncomment to enable)
        #error_page 401 = @do_oidc_flow;
        #auth_jwt "" token=$session_jwt;
        #auth_jwt_key_request /_jwks_uri;
        # work around for the fact that "return" by pass auth
        try_files @return302LaunchPad @return302LaunchPad;
    }
    location @return302LaunchPad {
        return 302 ui/launchpad;
    }
    # NGINX Management Suite modules service endpoint, provides inventory for the UI
    location = /modules {
        proxy_pass https://core-api-service/api/platform/v1/modules;
        proxy_ssl_trusted_certificate '{{ template "nms.secret.internal-certs.dir" . }}/ca.pem';
        proxy_ssl_certificate '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.pem';
        proxy_ssl_certificate_key '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.key';
        proxy_ssl_verify off;
        proxy_ssl_session_reuse on;
        proxy_ssl_protocols TLSv1.1 TLSv1.2;
        proxy_ssl_ciphers HIGH:!aNULL:!MD5;
    }
    # Installation script for nginx-agent packages
    # NGINX Agent must be installed from this location to support local repository and offline environments
    location = /agent/install {
        return 302 /install/nginx-agent;
    }
    location = /install/nginx-agent {
        sub_filter_types *;
        sub_filter '"CTR_FQDN"' '"$host"';
        # sub_filter_once on;
    }
    # Installation script for NGINX-PLUS advanced metrics package
    location = /install/nginx-plus-module-metrics {
        sub_filter_types *;
        sub_filter '"CTR_FQDN"' '"$host"';
        # sub_filter_once on;
    }
    # UI static assets
    location /ui {
        # UI static assets should be accessible without authentication
        gzip_static on;
        add_header Cache-Control "private; max-age=86400";
        try_files $uri $uri/ /ui/index.html;
    }
    location = /ui/manager.json {
        # HTTP Basic authentication (comment if using OIDC auth)
        auth_basic "Nginx Management Suite";
        # OIDC authentication (uncomment to enable)
        #error_page 401 = @do_oidc_flow;
        #auth_jwt "" token=$session_jwt;
        #auth_jwt_key_request /_jwks_uri;
        gzip_static on;
        add_header Cache-Control "private; max-age=86400";
    }
    # gRPC service for metric ingestion
    location /f5.nginx.agent.sdk.MetricsService {
        include /etc/nms/nginx/errors-grpc.loc_conf;
        grpc_socket_keepalive on;
        grpc_read_timeout 5m;
        grpc_send_timeout 5m;
        client_body_timeout 10m;
        grpc_pass grpcs://ingestion-grpc-service;
        grpc_ssl_trusted_certificate '{{ template "nms.secret.internal-certs.dir" . }}/ca.pem';
        grpc_ssl_certificate '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.pem';
        grpc_ssl_certificate_key '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.key';
        grpc_ssl_verify off;
        grpc_ssl_session_reuse on;
        grpc_ssl_protocols TLSv1.1 TLSv1.2;
        grpc_ssl_ciphers HIGH:!aNULL:!MD5;
    }
    # gRPC service for DPM
    location /f5.nginx.agent.sdk.Commander {
        include /etc/nms/nginx/errors-grpc.loc_conf;
        grpc_socket_keepalive on;
        grpc_read_timeout 5m;
        grpc_send_timeout 5m;
        client_body_timeout 10m;
        grpc_pass grpcs://dpm-grpc-service;
        grpc_ssl_trusted_certificate '{{ template "nms.secret.internal-certs.dir" . }}/ca.pem';
        grpc_ssl_certificate '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.pem';
        grpc_ssl_certificate_key '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.key';
        grpc_ssl_verify off;
        grpc_ssl_session_reuse on;
        grpc_ssl_protocols TLSv1.1 TLSv1.2;
        grpc_ssl_ciphers HIGH:!aNULL:!MD5;
    }
    # gRPC service for Notifications
    #
    # NotificationsSvc is an Internal Only API with the primary consumer
    # of the Svc to be the User Interface. As the service is internal-only,
    # the provided API may be changed or removed in a later release.
    #
    # Usage Pattern:
    # A gRPC client can Subscribe to Notifications, by performing a Subscribe
    # RPC call on the f5.nginx.nms.sdk.NotificationSvc. A stream of Notifications
    # will be sent to the client and stream will be updated with newer
    # Notifications as they are generated.
    #
    # NOTE: Server terminates client connections after an hour of no new Notifications
    # being generated. The client needs to reconnect on disconnect
    location /f5.nginx.nms.sdk.NotificationSvc {
        # HTTP Basic authentication (comment if using OIDC auth)
        auth_basic "Nginx Management Suite";
        # OIDC authentication (uncomment to enable)
        #error_page 401 = @do_oidc_flow;
        #auth_jwt "" token=$session_jwt;
        #auth_jwt_key_request /_jwks_uri;
        include /etc/nms/nginx/errors-grpc.loc_conf;
        grpc_socket_keepalive on;
        grpc_read_timeout 1h;
        grpc_send_timeout 5m;
        client_body_timeout 10m;
        grpc_set_header Content-Type application/grpc;
        grpc_pass grpcs://core-grpc-service;
        grpc_ssl_trusted_certificate '{{ template "nms.secret.internal-certs.dir" . }}/ca.pem';
        grpc_ssl_certificate '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.pem';
        grpc_ssl_certificate_key '{{ template "nms.secret.internal-certs.dir" . }}/apigw-client.key';
        grpc_ssl_verify off;
        grpc_ssl_session_reuse on;
        grpc_ssl_protocols TLSv1.1 TLSv1.2;
        grpc_ssl_ciphers HIGH:!aNULL:!MD5;
    }
}