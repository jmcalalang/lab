apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "acm.config.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "acm.labels" . | nindent 4 }}
data:
  acm.conf: |-
    # address for ACM daemon to bind to
    # enable this for ACM on tcp
    address = {{ template "acm.httpAddress" . }}
    # address = unix:/var/run/nms/acm.sock

    # Adjust logging level. fatal, error, warning, info, debug options available
    log_level = {{ template "acm.logLevel" . }}

    # Dqlite config
    # acm_dqlite_db_addr = 127.0.0.1:9300

    # NATS config
    nats_address = {{ template "acm.nats.address" . }}

    # location of NMS DPM service
    dpm_address = {{ template "acm.dpm.address" . }}

    # location of NMS Core service
    core_address = {{ template "acm.core.address" . }}

    # Client certificate configuration for access to NMS services
    nms_ca_path = /etc/nms/certs/services/ca.pem
    tls_ca_path = /etc/nms/certs/services/ca.pem
    nms_tls_client_cert_path = /etc/nms/certs/services/core-client.pem
    nms_tls_client_key_path = /etc/nms/certs/services/core-client.key

    # Server certificate configuration for ACM service
    tls_cert_path = /etc/nms/certs/services/acm-server.pem
    tls_key_path = /etc/nms/certs/services/acm-server.key

    # set to 1 to add timestamps from logger, useful when not using syslog
    log_timestamp = 1
    
    enable_metrics = {{ template "acm.metrics.enabled" . }}
  acm.json: |-
    {
      "name": "API Connectivity Manager",
      "rootToken": "acm",
      "sourceLocation": "/ui-acm/index.js",
      "apiSpec": "/ui-acm/acm.json",
      "moduleVersion": "1.6.0",
      "description": "Connect, secure, and govern your APIs.",
      "icon": "PHN2ZyBpZD0iQXJ0IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA2My4zNiA3My40NCI+CiAgPHBhdGggZmlsbD0iIzAwQTk4MCIgZD0iTS41LDU0LjcyYy4zNCwuNTksLjgyLDEuMDUsMS4zNywxLjM2bDI3Ljk1LDE2LjE0aDBjLjU1LC4zMiwxLjE4LC41LDEuODYsLjVzMS4zMS0uMTgsMS44Ni0uNTFsMjcuOTUtMTYuMTRjLjU1LS4zMSwxLjAzLS43NywxLjM3LTEuMzZzLjUtMS4yMywuNDktMS44NlYyMC41OGgwYzAtLjYzLS4xNS0xLjI3LS40OS0xLjg2cy0uODItMS4wNC0xLjM3LTEuMzZMMzMuNTQsMS4yM2gwYy0uNTQtLjMyLTEuMTgtLjUxLTEuODYtLjUxcy0xLjMxLC4xOC0xLjg2LC41MWgwTDEuODcsMTcuMzZjLS41NSwuMzEtMS4wMywuNzctMS4zNywxLjM2LS4zNCwuNTktLjUsMS4yMy0uNDksMS44NkgwVjUyLjg2YzAsLjYzLC4xNSwxLjI3LC40OSwxLjg2IiAvPgogIDxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik01NC42NCw0Ni4yMWMtMS4xOCwwLTIuMjEsLjU1LTIuOSwxLjM5bC05LjQ2LTUuNDZ2LTEwLjgyaDB2LS4wMmw5LjQ2LTUuNDZjLjY5LC44NCwxLjczLDEuMzksMi45LDEuMzksMi4wOCwwLDMuNzctMS42OSwzLjc3LTMuNzdzLTEuNjktMy43Ny0zLjc3LTMuNzdjLTEuMDQsMC0xLjk5LC40My0yLjY3LDEuMTFsLTE4LjYxLTEwLjc1Yy0xLjAxLS42LTIuMzQtLjU5LTMuMzQsMEwxMS4zOSwyMC44MWMtLjY4LS42OS0xLjYzLTEuMTEtMi42Ny0xLjExLTIuMDgsMC0zLjc3LDEuNjktMy43NywzLjc3czEuNjksMy43NywzLjc3LDMuNzdjMS4xOCwwLDIuMjEtLjU1LDIuOS0xLjM5bDkuNDYsNS40NnYuMDJoMHYxMC44MmwtOS40Niw1LjQ2Yy0uNjktLjg0LTEuNzMtMS4zOS0yLjktMS4zOS0yLjA4LDAtMy43NywxLjY5LTMuNzcsMy43N3MxLjY5LDMuNzcsMy43NywzLjc3YzEuMDQsMCwxLjk5LS40MywyLjY3LTEuMTFsMTguNjEsMTAuNzVjLjUsLjMsMS4wOCwuNDUsMS42NywuNDVzMS4xNy0uMTYsMS42Ny0uNDVsMTguNjItMTAuNzVjLjY4LC42OSwxLjYzLDEuMTEsMi42NywxLjExLDIuMDgsMCwzLjc3LTEuNjksMy43Ny0zLjc3cy0xLjY5LTMuNzctMy43Ny0zLjc3aC4wMVpNMTIuMDksMjEuODFMMzAuNjIsMTEuMWMuNjQtLjM4LDEuNDgtLjM4LDIuMTMsMGwxOC41MywxMC43Yy0uMjUsLjUtLjQsMS4wNi0uNCwxLjY2LDAsLjQ3LC4xLC45MiwuMjUsMS4zM2wtOS40NSw1LjQ2aC0uMDJsLTkuMzYtNS40MWgwYy0uMTgtLjExLS4zOS0uMTctLjYyLS4xN3MtLjQ0LC4wNi0uNjIsLjE3aDBsLTkuMzYsNS40aC0uMDJsLTkuNDUtNS40NGMuMTYtLjQyLC4yNS0uODYsLjI1LTEuMzMsMC0uNi0uMTUtMS4xNi0uNC0xLjY2aC4wMVptMjAuNjYsNDAuNTNjLS42NCwuMzgtMS40OCwuMzgtMi4xMywwbC0xOC41My0xMC43Yy4yNS0uNSwuNC0xLjA2LC40LTEuNjYsMC0uNDctLjEtLjkyLS4yNS0xLjMzbDkuNDUtNS40NmguMDJsOS4zNiw1LjQxaDBjLjE4LC4xMSwuMzksLjE3LC42MiwuMTdzLjQ0LS4wNiwuNjItLjE3bDkuMzYtNS40aC4wMmw5LjQ1LDUuNDRjLS4xNiwuNDItLjI1LC44Ni0uMjUsMS4zMywwLC42LC4xNSwxLjE2LC40LDEuNjZsLTE4LjUzLDEwLjdoLS4wMVoiIC8+Cjwvc3ZnPg=="
    }
  nms-acm-upstream.conf: |-
    upstream acm-api-service {
      zone acm-api-service 64k;
      server {{ template "acm.service.http" . }};
      keepalive 32;
    }
  nms-acm-location.conf: |-
    location = /401_certs.json {
      return 401 '{"code":401,"message":"Unauthorized. Failed to verify the legitimacy of the client and therefore could not establish a secure connection to it. To learn more about this situation and how to fix it, please visit the ACM documentation regarding DevPortal and Resource Credentials or contact your system administrator."}';
    }

    location ~* ^/api/acm/(?<version>v[1-9]+(\.[0-9]+)?)/ {
        # HTTP Basic authentication (comment if using OIDC auth)
        auth_basic "Nginx Management Suite";
        # OIDC authentication (uncomment to enable)
        #auth_jwt "" token=$session_jwt;
        #auth_jwt_key_request /_jwks_uri;
        limit_req zone=nms-ratelimit burst=20 nodelay;
        limit_req_status 429;

        proxy_ssl_certificate     /etc/nms/certs/services/acm-client.pem;
        proxy_ssl_certificate_key /etc/nms/certs/services/acm-client.key;
        location ~* /services/(.+)$ {
            proxy_pass https://acm-api-service/api/acm/$version/services/$1$is_args$args;
        }
        location ~* /infrastructure/(.+)$ {
            proxy_pass https://acm-api-service/api/acm/$version/infrastructure/$1$is_args$args;
        }
    }
    location /ui-acm {
        # HTTP Basic authentication (comment if using OIDC auth)
        auth_basic "Nginx Management Suite";
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        # OIDC authentication (uncomment to enable)
        #error_page 401 = @do_oidc_flow;
        #auth_jwt "" token=$session_jwt;
        #auth_jwt_key_request /_jwks_uri;
        # root /var/www/acm;
        proxy_ssl_certificate     /etc/nms/certs/services/acm-client.pem;
        proxy_ssl_certificate_key /etc/nms/certs/services/acm-client.key;
        proxy_pass https://acm-api-service/ui;
    }
    {{- if .Values.acm.devportal.credentials.enabled }}
    location = /api/acm/v1/devportal/credentials {
        auth_basic off;
        error_page 401 /401_certs.json;
        {{- if .Values.acm.devportal.credentials.ssl }}
        if ($ssl_client_verify != SUCCESS) {
            return 401;
        }
        {{- end }}
        proxy_pass https://acm-api-service/api/acm/v1/devportal/credentials;
    }
    {{- end }}
